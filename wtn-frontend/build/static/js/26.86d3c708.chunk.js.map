{"version":3,"sources":["views/RecoveryPassword/components/ResetPasswordForm/ResetPasswordForm.js","views/RecoveryPassword/RecoveryPassword.js"],"names":["schema","new_password","presence","allowEmpty","message","confirm_password","useStyles","makeStyles","theme","root","fields","margin","spacing","display","flexWrap","flexGrow","submitButton","marginTop","width","ResetPasswordForm","props","className","rest","classes","router","useRouter","useDispatch","useState","isValid","values","touched","errors","formState","setFormState","useEffect","validate","handleChange","event","persist","target","name","type","checked","value","handleSubmit","a","preventDefault","history","push","hasError","field","clsx","onSubmit","autoComplete","TextField","error","fullWidth","helperText","label","onChange","variant","Button","color","disabled","size","height","alignItems","justifyContent","padding","card","breakpoints","sx","maxWidth","overflow","position","flexBasis","content","icon","backgroundImage","gradients","green","palette","white","borderRadius","shape","top","left","fontSize","loginForm","divider","person","avatar","marginRight","RecoveryPassword","title","Card","CardContent","Typography","gutterBottom","Divider"],"mappings":"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","file":"static/js/26.86d3c708.chunk.js","sourcesContent":["/* eslint-disable no-unused-vars */\nimport React, { useState, useEffect } from \"react\";\nimport validate from \"validate.js\";\nimport clsx from \"clsx\";\nimport PropTypes from \"prop-types\";\nimport { useDispatch } from \"react-redux\";\nimport { makeStyles } from \"@material-ui/styles\";\nimport { Button, TextField } from \"@material-ui/core\";\n\nimport useRouter from \"utils/useRouter\";\nimport { login } from \"actions\";\n\nconst schema = {\n  new_password: {\n    presence: { allowEmpty: false, message: \"is required\" },\n  },\n  confirm_password: {\n    presence: { allowEmpty: false, message: \"is required\" },\n  },\n};\n\nconst useStyles = makeStyles((theme) => ({\n  root: {},\n  fields: {\n    margin: theme.spacing(-1),\n    display: \"flex\",\n    flexWrap: \"wrap\",\n    \"& > *\": {\n      flexGrow: 1,\n      margin: theme.spacing(1),\n    },\n  },\n  submitButton: {\n    marginTop: theme.spacing(2),\n    width: \"100%\",\n  },\n}));\n\nconst ResetPasswordForm = (props) => {\n  const { className, ...rest } = props;\n\n  const classes = useStyles();\n  const router = useRouter();\n  const dispatch = useDispatch();\n\n  const [formState, setFormState] = useState({\n    isValid: false,\n    values: {},\n    touched: {},\n    errors: {},\n  });\n\n  useEffect(() => {\n    const errors = validate(formState.values, schema);\n\n    setFormState((formState) => ({\n      ...formState,\n      isValid: errors ? false : true,\n      errors: errors || {},\n    }));\n  }, [formState.values]);\n\n  const handleChange = (event) => {\n    event.persist();\n\n    setFormState((formState) => ({\n      ...formState,\n      values: {\n        ...formState.values,\n        [event.target.name]:\n          event.target.type === \"checkbox\"\n            ? event.target.checked\n            : event.target.value,\n      },\n      touched: {\n        ...formState.touched,\n        [event.target.name]: true,\n      },\n    }));\n  };\n\n  const handleSubmit = async (event) => {\n    event.preventDefault();\n    // dispatch(login());\n    router.history.push(\"/\");\n  };\n\n  const hasError = (field) =>\n    formState.touched[field] && formState.errors[field] ? true : false;\n\n  return (\n    <form\n      {...rest}\n      className={clsx(classes.root, className)}\n      onSubmit={handleSubmit}\n      autoComplete=\"off\"\n    >\n      <div className={classes.fields}>\n        <TextField\n          error={hasError(\"new_password\")}\n          fullWidth\n          helperText={\n            hasError(\"new_password\") ? formState.errors.new_password[0] : null\n          }\n          label=\"New password\"\n          name=\"new_password\"\n          onChange={handleChange}\n          value={formState.values.new_password || \"\"}\n          variant=\"outlined\"\n        />\n        <TextField\n          error={hasError(\"confirm_password\")}\n          fullWidth\n          helperText={\n            hasError(\"confirm_password\")\n              ? formState.errors.confirm_password[0]\n              : null\n          }\n          label=\"Confirm new password\"\n          name=\"confirm_password\"\n          onChange={handleChange}\n          type=\"confirm_password\"\n          value={formState.values.confirm_password || \"\"}\n          variant=\"outlined\"\n        />\n      </div>\n      <Button\n        className={classes.submitButton}\n        color=\"secondary\"\n        disabled={!formState.isValid}\n        size=\"large\"\n        type=\"submit\"\n        variant=\"contained\"\n      >\n        Reset\n      </Button>\n    </form>\n  );\n};\n\nResetPasswordForm.propTypes = {\n  className: PropTypes.string,\n};\n\nexport default ResetPasswordForm;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Page } from \"components\";\nimport { makeStyles } from \"@material-ui/styles\";\nimport gradients from \"utils/gradients\";\nimport { Card, CardContent, Divider, Typography } from \"@material-ui/core\";\nimport LockIcon from \"@material-ui/icons/Lock\";\nimport { ResetPasswordForm } from \"./components\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    height: \"100%\",\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    padding: theme.spacing(6, 2),\n  },\n  card: {\n    width: theme.breakpoints.values.sx,\n    maxWidth: \"100%\",\n    overflow: \"unset\",\n    display: \"flex\",\n    position: \"relative\",\n    \"& > *\": {\n      flexGrow: 1,\n      flexBasis: \"50%\",\n      width: \"50%\",\n    },\n  },\n  content: {\n    padding: theme.spacing(8, 4, 3, 4),\n  },\n\n  icon: {\n    backgroundImage: gradients.green,\n    color: theme.palette.white,\n    borderRadius: theme.shape.borderRadius,\n    padding: theme.spacing(1),\n    position: \"absolute\",\n    top: -32,\n    left: theme.spacing(3),\n    height: 64,\n    width: 64,\n    fontSize: 32,\n  },\n  loginForm: {\n    marginTop: theme.spacing(3),\n  },\n  divider: {\n    margin: theme.spacing(2, 0),\n  },\n  person: {\n    marginTop: theme.spacing(2),\n    display: \"flex\",\n  },\n  avatar: {\n    marginRight: theme.spacing(2),\n  },\n}));\n\nfunction RecoveryPassword(props) {\n  const classes = useStyles();\n  return (\n    <Page className={classes.root} title=\"Recovery password\">\n      <Card className={classes.card}>\n        <CardContent className={classes.content}>\n          <LockIcon className={classes.icon} />\n          <Typography gutterBottom variant=\"h3\">\n            Reset password\n          </Typography>\n          <ResetPasswordForm className={classes.loginForm} />\n          <Divider className={classes.divider} />\n        </CardContent>\n      </Card>\n    </Page>\n  );\n}\n\nRecoveryPassword.propTypes = {};\n\nexport default RecoveryPassword;\n"],"sourceRoot":""}