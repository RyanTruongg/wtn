{"version":3,"sources":["views/_StudentViews_/OnlineTest/hooks/online-test-context.js","views/_StudentViews_/OnlineTest/components/TakingTest/TakingTest.js","utils/parseDate.js","views/_StudentViews_/OnlineTest/components/StartPage/StartPage.js","views/_StudentViews_/OnlineTest/OnlineTest.js","views/_StudentViews_/OnlineTest/index.js"],"names":["testDetailsContext","React","createContext","useTestDetailsContext","context","useContext","undefined","Error","TestDetailsProvider","props","testId","useState","testDetails","setTestDetails","attempt","setAttempt","questions","setQuestions","result","setResult","auth","useAuth","getTestDetails","useCallback","a","axios","get","data","res","getAttempt","user","user_id","getQuestions","getResults","id","useEffect","console","log","value","useMemo","createAttempt","post","exam_id","submitAttempt","answers","attempt_id","Provider","children","useStyles","makeStyles","theme","root","padding","spacing","fontSize","textAlign","header","display","justifyContent","alignItems","paginate","question","margin","option","marginTop","marginLeft","marginRight","borderRadius","border","borderColor","palette","primary","light","boxSizing","minHeight","fontWeight","selected","backgroundColor","main","color","timerProps","isPlaying","size","strokeWidth","TakingTest","classes","form","useForm","onSubmit","Object","keys","map","key","question_id","answer","startTime","Date","now","endTime","timeup","duration","start_time","remainingTime","className","title","Paper","Box","Typography","variant","name","colors","initialRemainingTime","onComplete","totalElapsedTime","getValues","time","elapsedTime","toInteger","autoComplete","handleSubmit","idx","shortName","control","render","field","RadioGroup","optionIdx","Fragment","FormControlLabel","clsx","watch","Radio","label","content","Divider","mt","Button","type","fullWidth","parseDate","dateString","date","userTimezoneOffset","getTimezoneOffset","getTime","overflow","StyledBadge","withStyles","colorPrimary","colorSecondary","badge","Badge","StartPage","ended","end_time","started","startAble","continueAble","submitted","Card","Grid","container","item","xs","gutterBottom","md","toLocaleString","badgeContent","onClick","correctAnswers","totalQuestions","OnlineTest","useParams"],"mappings":"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","file":"static/js/27.b4302723.chunk.js","sourcesContent":["import { useAuth } from \"hooks/use-auth\";\nimport React, { useCallback } from \"react\";\nimport axios from \"services/axios\";\nconst testDetailsContext = React.createContext();\n\nexport const useTestDetailsContext = () => {\n  const context = React.useContext(testDetailsContext);\n  if (context === undefined) {\n    throw new Error(\n      \"useTestDetailsContext must be used within a TestDetailsProvider\"\n    );\n  }\n  return context;\n};\n\nexport const TestDetailsProvider = (props) => {\n  const { testId } = props;\n  const [testDetails, setTestDetails] = React.useState([]);\n  const [attempt, setAttempt] = React.useState(null);\n  const [questions, setQuestions] = React.useState([]);\n  const [result, setResult] = React.useState(null);\n\n  const auth = useAuth();\n\n  const getTestDetails = useCallback(async () => {\n    try {\n      const res = await (await axios.get(`/exams/${testId}`)).data;\n\n      setTestDetails(res.data);\n    } catch (error) {}\n  }, [testId]);\n\n  const getAttempt = useCallback(async () => {\n    try {\n      const res = await (\n        await axios.get(`/exams/attempt/${testId}/${auth.user.user_id}`)\n      ).data;\n\n      setAttempt(res.data);\n    } catch (error) {}\n  }, [auth.user.user_id, testId]);\n\n  const getQuestions = useCallback(async () => {\n    try {\n      const res = await (await axios.get(`/exam-questions/exam/${testId}`))\n        .data;\n\n      setQuestions(res.data);\n    } catch (error) {}\n  }, [testId]);\n\n  const getResults = useCallback(async () => {\n    try {\n      const res = await (await axios.get(`/exam-answers/result/${attempt.id}`))\n        .data;\n\n      setResult(res.data);\n    } catch (error) {}\n  }, [attempt]);\n\n  React.useEffect(() => {\n    getTestDetails();\n    getAttempt();\n    getQuestions();\n  }, [getAttempt, getQuestions, getTestDetails]);\n\n  React.useEffect(() => {\n    if (attempt?.id) {\n      getResults();\n    }\n  }, [attempt, getResults]);\n\n  React.useEffect(() => {\n    console.log(result);\n  }, [result]);\n\n  const value = React.useMemo(() => {\n    const createAttempt = async () => {\n      try {\n        const res = await (\n          await axios.post(`/exams/attempt`, {\n            exam_id: testId,\n            user_id: auth.user.user_id,\n          })\n        ).data;\n\n        setAttempt(res.data);\n      } catch (error) {}\n    };\n\n    const submitAttempt = async (answers) => {\n      try {\n        await (\n          await axios.post(`/exam-answers/submit`, {\n            attempt_id: attempt.id,\n            answers,\n          })\n        ).data;\n\n        getAttempt();\n      } catch (error) {}\n    };\n\n    return {\n      result,\n      questions,\n      attempt,\n      testDetails,\n      createAttempt,\n      submitAttempt,\n    };\n  }, [\n    attempt,\n    auth.user.user_id,\n    getAttempt,\n    questions,\n    result,\n    testDetails,\n    testId,\n  ]);\n\n  return (\n    <testDetailsContext.Provider value={value}>\n      {props.children}\n    </testDetailsContext.Provider>\n  );\n};\n","import React from \"react\";\nimport { makeStyles } from \"@material-ui/styles\";\nimport {\n  Box,\n  Divider,\n  FormControlLabel,\n  Paper,\n  Radio,\n  Button,\n  RadioGroup,\n  Typography,\n} from \"@material-ui/core\";\nimport { CountdownCircleTimer } from \"react-countdown-circle-timer\";\nimport { useTestDetailsContext } from \"../../hooks/online-test-context\";\nimport { Page } from \"components\";\nimport { useForm, Controller } from \"react-hook-form\";\n\nimport clsx from \"clsx\";\nimport { toInteger } from \"lodash\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    padding: theme.spacing(3),\n    \"& .time\": {\n      fontSize: \"32px\",\n      textAlign: \"center\",\n    },\n  },\n  header: {\n    display: \"flex\",\n    justifyContent: \"space-between\",\n    alignItems: \"center\",\n    padding: \"1rem 1.5rem\",\n  },\n  paginate: {\n    padding: 0,\n    justifyContent: \"center\",\n  },\n  question: {\n    padding: \"1rem 2rem\",\n    margin: \"2rem 0\",\n  },\n  option: {\n    marginTop: \"0.5rem\",\n    marginLeft: 0,\n    marginRight: 0,\n    borderRadius: \"0.5rem\",\n    border: \"1px solid\",\n    borderColor: theme.palette.primary.light,\n    boxSizing: \"border-box\",\n    minHeight: 40,\n\n    \"&:hover *\": {\n      fontWeight: \"bold\",\n    },\n  },\n  selected: {\n    backgroundColor: theme.palette.primary.main,\n    \"& *\": {\n      color: \"white\",\n      fontWeight: \"bold\",\n    },\n  },\n}));\n\nconst timerProps = {\n  isPlaying: true,\n  size: 120,\n  strokeWidth: 6,\n};\n\nconst renderTime = (dimension, time) => {\n  return (\n    <div className=\"time-wrapper\">\n      <div className=\"time\">{time}</div>\n    </div>\n  );\n};\n\nconst TakingTest = () => {\n  const classes = useStyles();\n\n  const {\n    testDetails,\n    questions,\n    submitAttempt,\n    attempt,\n  } = useTestDetailsContext();\n  const form = useForm();\n\n  const onSubmit = (data) => {\n    const answers = Object.keys(data).map((key) => ({\n      question_id: key,\n      answer: data[key],\n    }));\n    submitAttempt(answers);\n  };\n  const startTime = Date.now() / 1000;\n  const endTime = new Date(attempt?.timeup) / 1000;\n\n  const startAt = new Date(attempt?.start_time) / 1000;\n  // date to seconds\n\n  const duration = endTime - startAt;\n\n  const remainingTime = endTime - startTime;\n\n  return (\n    <Page className={classes.root} title=\"Kiểm tra\">\n      <Paper className={classes.header}>\n        <Box>\n          <Typography variant={\"h1\"} className={\"mb-3\"}>\n            {testDetails?.name}\n          </Typography>\n        </Box>\n        <CountdownCircleTimer\n          {...timerProps}\n          colors={[[\"#3f51b5\"]]}\n          duration={duration}\n          initialRemainingTime={remainingTime}\n          onComplete={(totalElapsedTime) => {\n            if (totalElapsedTime >= remainingTime) {\n              onSubmit(form.getValues());\n              return [false];\n            }\n            return [true];\n          }}\n        >\n          {({ elapsedTime }) =>\n            renderTime(\n              \"Phút\",\n              toInteger((duration - elapsedTime) / 60) +\n                \":\" +\n                toInteger((duration - elapsedTime) % 60)\n            )\n          }\n        </CountdownCircleTimer>\n      </Paper>\n      <form autoComplete=\"off\" onSubmit={form.handleSubmit(onSubmit)}>\n        {questions?.map((question, idx) => {\n          const shortName = [\"A\", \"B\", \"C\", \"D\"];\n          return (\n            <Paper className={classes.question}>\n              <Typography variant=\"h5\">\n                Câu {idx + 1}: {question[\"content\"]}\n              </Typography>\n\n              <Controller\n                control={form.control}\n                name={question.id}\n                render={({ field }) => (\n                  <RadioGroup {...field}>\n                    {question[\"options\"]?.map((option, optionIdx) => (\n                      <React.Fragment>\n                        <FormControlLabel\n                          className={clsx(\n                            classes.option,\n                            form.watch(question.id) === option.id &&\n                              classes.selected\n                          )}\n                          value={option.id}\n                          control={<Radio />}\n                          label={shortName[optionIdx] + \". \" + option.content}\n                        />\n                        <Divider variant=\"fullWidth\" />\n                      </React.Fragment>\n                    ))}\n                  </RadioGroup>\n                )}\n              />\n            </Paper>\n          );\n        })}\n\n        <Box mt={3}>\n          <Button\n            type=\"submit\"\n            variant=\"contained\"\n            color=\"primary\"\n            fullWidth\n            size=\"large\"\n          >\n            Submit\n          </Button>\n        </Box>\n      </form>\n    </Page>\n  );\n};\n\nexport default TakingTest;\n","export default function parseDate(dateString) {\n  const date = new Date(dateString);\n  const userTimezoneOffset = date.getTimezoneOffset() * 60000;\n  return new Date(date.getTime() + userTimezoneOffset);\n}\n","import React from \"react\";\n\nimport { Badge, Button, Card, Grid, Typography } from \"@material-ui/core\";\nimport { makeStyles, withStyles } from \"@material-ui/styles\";\nimport parseDate from \"utils/parseDate\";\nimport { useTestDetailsContext } from \"../../hooks/online-test-context\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    margin: theme.spacing(4),\n    padding: theme.spacing(4),\n    overflow: \"hidden\",\n  },\n}));\n\nconst StyledBadge = withStyles((theme) => ({\n  colorPrimary: { backgroundColor: \"#388e3c\" },\n  colorSecondary: { backgroundColor: \"#f57c00\" },\n  badge: {\n    padding: \"0 0.5rem\",\n  },\n  root: {\n    marginLeft: theme.spacing(4),\n  },\n}))(Badge);\n\nconst StartPage = (props) => {\n  const classes = useStyles();\n\n  const {\n    testDetails,\n    attempt,\n    createAttempt,\n    result,\n  } = useTestDetailsContext();\n\n  if (!testDetails) {\n    return null;\n  }\n\n  const now = Date.now();\n  const ended = parseDate(testDetails.end_time) < now;\n  const started = parseDate(testDetails.start_time) < now;\n\n  const startAble = started && !ended && !attempt;\n  const continueAble = !ended && attempt && !attempt.submitted;\n\n  return (\n    <Card className={classes.root}>\n      <Grid container spacing={4} justifyContent=\"center\" alignItems=\"center\">\n        <Grid item xs={12}>\n          <Typography gutterBottom variant=\"h3\">\n            Tên bài kiểm tra:\n          </Typography>\n          <Typography variant=\"h1\">{testDetails.name}</Typography>\n        </Grid>\n        <Grid item xs={12} md={6}>\n          <Typography color=\"textSecondary\" variant=\"h4\">\n            Bắt đầu: {parseDate(testDetails.start_time).toLocaleString()}\n          </Typography>\n        </Grid>\n        <Grid item xs={12} md={6}>\n          <Typography color=\"textSecondary\" variant=\"h4\">\n            Kết thúc: {parseDate(testDetails.end_time).toLocaleString()}\n          </Typography>\n        </Grid>\n\n        <Grid item xs={12}>\n          <Typography color=\"textSecondary\" variant=\"h4\">\n            Thời gian làm bài: {testDetails.duration} phút\n          </Typography>\n        </Grid>\n\n        <Grid justifyContent=\"flex-start\" item xs={6}>\n          {started && !ended && (\n            <StyledBadge badgeContent={\"Started\"} color=\"secondary\" />\n          )}\n          {started && ended && (\n            <StyledBadge badgeContent={\"Ended\"} color=\"error\" />\n          )}\n          {!started && !ended && (\n            <StyledBadge badgeContent={\"Upcoming\"} color=\"primary\" />\n          )}\n        </Grid>\n        <Grid item xs={6}>\n          {startAble && (\n            <Button onClick={createAttempt} variant=\"outlined\" color=\"primary\">\n              Bắt đầu\n            </Button>\n          )}\n\n          {continueAble && (\n            <Button variant=\"outlined\" color=\"primary\">\n              Tiếp tục\n            </Button>\n          )}\n\n          {result && (\n            <Typography color=\"textSecondary\" variant=\"h6\">\n              Điểm: {result.correctAnswers}/{result.totalQuestions}\n            </Typography>\n          )}\n        </Grid>\n      </Grid>\n    </Card>\n  );\n};\n\nexport default StartPage;\n","import { Box } from \"@material-ui/core\";\nimport { makeStyles } from \"@material-ui/styles\";\nimport React from \"react\";\nimport { StartPage, TakingTest } from \"./components\";\n\nimport { useTestDetailsContext } from \"./hooks/online-test-context\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    // margin: theme.spacing(2),\n  },\n}));\n\nconst OnlineTest = (props) => {\n  const classes = useStyles();\n  const { attempt } = useTestDetailsContext();\n  console.log(attempt);\n  return (\n    <Box className={classes.root}>\n      {/* {status === CHECKING && <p>Checking</p>}\n      {status === UPCOMING && <StartPage test={test} />}\n      {status === STARTED && <TakingTest />}\n      {status === ENDED && <StartPage test={test} ended />} */}\n\n      {attempt && !attempt?.submitted && <TakingTest />}\n      {(!attempt || attempt?.submitted) && <StartPage />}\n    </Box>\n  );\n};\n\nexport default OnlineTest;\n","import React from \"react\";\nimport { useParams } from \"react-router\";\nimport { TestDetailsProvider } from \"./hooks/online-test-context\";\nimport OnlineTest from \"./OnlineTest\";\n\nexport default () => {\n  const { testId } = useParams();\n  return (\n    <TestDetailsProvider testId={testId}>\n      <OnlineTest />\n    </TestDetailsProvider>\n  );\n};\n"],"sourceRoot":""}